#!/bin/bash

#Colours
greenColour="\e[0;32m\033[1m"
endColour="\033[0m\e[0m"
redColour="\e[0;31m\033[1m"
blueColour="\e[0;34m\033[1m"
yellowColour="\e[0;33m\033[1m"
purpleColour="\e[0;35m\033[1m"
turquoiseColour="\e[0;36m\033[1m"
grayColour="\e[0;37m\033[1m"

function ctrl_c(){
  echo -e "\n${redColour}[!]${endColour} ${grayColour}Quiting...${endColour}\n"
  exit 1 
}

trap ctrl_c INT

function help_panel(){
  echo -e "\n${purpleColour}[i]${endColour} ${grayColour}Usage:${endColour}\n"
  echo -e "\t${yellowColour}[*]${enColour}${grayColour} $0 -c ${yellowColour}<${endColour}${purpleColour}technology${endColour}${yellowColour}>${endColour}${endColour} ${yellowColour}--->${endColour} ${grayColour}Know some commands about a technology${endColour}\n"
  echo -e "\t${redColour}[!]${endColour} ${grayColour}Available technologies${endColour}${redColour}:${endColour}"
  echo -e "\t${redColour}-${endColour} ${grayColour}git${endColour}"
}

function git(){
  echo -e "\n${turquoiseColour}[i]${endColour} ${yellowColour}$1${endColour}${grayColour} commands${endColour}${turquoiseColour}:${endColour} \n"
  echo -e "\t ${turquoiseColour}-${endColour} ${yellowColour}git${endColour} ${grayColour}init${endColour} ${yellowColour}----------------------------------->${endColour} ${turquoiseColour}i)${endColour} ${grayColour}Initialize a git repository.${endColour}"
  echo -e "\t ${turquoiseColour}-${endColour} ${yellowColour}git${endColour} ${grayColour}clone${endColour} ${purpleColour}{repository_url}${endColour} ${yellowColour}----------------->${endColour} ${turquoiseColour}i)${endColour} ${grayColour}Clone the repository hosted at the url.${endColour}"
  echo -e "\t ${turquoiseColour}-${endColour} ${yellowColour}git${endColour} ${grayColour}status${endColour} ${yellowColour}--------------------------------->${endColour} ${turquoiseColour}i)${endColour} ${grayColour}Check the status of the repository.${endColour}" 
  echo -e "\t ${turquoiseColour}-${endColour} ${yellowColour}git${endColour} ${grayColour}add${endColour} ${purpleColour}{file_to_add}${endColour} ${yellowColour}---------------------->${endColour} ${turquoiseColour}i)${endColour} ${grayColour}Add trace to indicated file.${endColour} ${turquoiseColour}(${endColour}${grayColour}With a . we would add traces to all changed files${endColour}${turquoiseColour})${endColour}"
  echo -e "\t ${turquoiseColour}-${endColour} ${yellowColour}git${endColour} ${grayColour}commit${endColour} ${turquoiseColour}-m${endColour} ${purpleColour}{message_to_save_change}${endColour} ${yellowColour}----->${endColour} ${turquoiseColour}i)${endColour} ${grayColour}Add changes to save under a descriptive name.${endColour}" 
  echo -e "\t ${turquoiseColour}-${endColour} ${yellowColour}git${endColour} ${grayColour}push${endColour} ${purpleColour}{url_or_branch}${endColour} ${yellowColour}------------------->${endColour} ${turquoiseColour}i)${endColour} ${grayColour}Update the branch with the changes previously commited.${endColour}" 
  echo -e "\t ${turquoiseColour}-${endColour} ${yellowColour}git${endColour} ${grayColour}checkout${endColour} ${purpleColour}{branch_name}${endColour} ${yellowColour}----------------->${endColour} ${turquoiseColour}i)${endColour} ${grayColour}Switch to an existing branch.${endColour}" 
  echo -e "\t ${turquoiseColour}-${endColour} ${yellowColour}git${endColour} ${grayColour}checkout${endColour} ${turquoiseColour}-b${endColour} ${purpleColour}{branch_name}${endColour} ${yellowColour}-------------->${endColour} ${turquoiseColour}i)${endColour} ${grayColour}Create a branch and switch.${endColour}" 
  echo -e "\t ${turquoiseColour}-${endColour} ${yellowColour}git${endColour} ${grayColour}branch${endColour} ${yellowColour}--------------------------------->${endColour} ${turquoiseColour}i)${endColour} ${grayColour}See local branches.${endColour}"
  echo -e "\t ${turquoiseColour}-${endColour} ${yellowColour}git${endColour} ${grayColour}branch${endColour} ${turquoiseColour}-a${endColour} ${yellowColour}------------------------------>${endColour} ${turquoiseColour}i)${endColour} ${grayColour}View existing branches in the repository.${endColour}"  
  echo -e "\t ${turquoiseColour}-${endColour} ${yellowColour}git${endColour} ${grayColour}branch${endColour} ${turquoiseColour}-D${endColour} ${purpleColour}{branch_name}${endColour} ${yellowColour}---------------->${endColour} ${turquoiseColour}i)${endColour} ${grayColour}Delete a local branch.${endColour}"
  echo -e "\t ${turquoiseColour}-${endColour} ${yellowColour}git${endColour} ${grayColour}log${endColour} ${yellowColour}------------------------------------>${endColour} ${turquoiseColour}i)${endColour} ${grayColour}View commit history.${endColour}"
  echo -e "\t ${turquoiseColour}-${endColour} ${yellowColour}git${endColour} ${grayColour}show${endColour} ${purpleColour}{commit_id}${endColour} ${yellowColour}----------------------->${endColour} ${turquoiseColour}i)${endColour} ${grayColour}View the changes made in that commit.${endColour}"
  echo -e "\t ${turquoiseColour}-${endColour} ${yellowColour}git${endColour} ${grayColour}checkout${endColour} ${purpleColour}{commit_id}${endColour} ${yellowColour}------------------->${endColour} ${turquoiseColour}i)${endColour} ${grayColour}Return to the project state of that commit.${endColour}" 
  echo -e "\t ${turquoiseColour}-${endColour} ${yellowColour}git${endColour} ${grayColour}reset${endColour} ${turquoiseColour}--hard${endColour} ${purpleColour}HEAD^${endColour} ${yellowColour}--------------------->${endColour} ${turquoiseColour}i)${endColour} ${grayColour}Remove the last commit.${endColour}"
  echo -e "\t ${turquoiseColour}-${endColour} ${yellowColour}git${endColour} ${grayColour}reset${endColour} ${turquoiseColour}--hard${endColour} ${purpleColour}HEAD~{num}${endColour} ${yellowColour}---------------->${endColour} ${turquoiseColour}i)${endColour} ${grayColour}Remove the last {num} commits entered.${endColour}" 
  echo -e "\t ${turquoiseColour}-${endColour} ${yellowColour}git${endColour} ${grayColour}tag${endColour} ${yellowColour}------------------------------------>${endColour} ${turquoiseColour}i)${endColour} ${grayColour}View points in the history of a branch that persists unchanged.${endColour}"
  echo -e "\t ${turquoiseColour}-${endColour} ${yellowColour}git${endColour} ${grayColour}show${endColour} ${purpleColour}{tag_name}${endColour} ${yellowColour}------------------------>${endColour} ${turquoiseColour}i)${endColour} ${grayColour}View the tag selected.${endColour}"
}


function bash(){
  echo -e "\n${turquoiseColour}[i]${endColour} ${yellowColour}$1${endColour}${grayColour} commands${endColour}${turquoiseColour}:${endColour} \n"
  echo -e "\n${yellowColour}----------------------------------------${endColour} ${redColour}COMANDOS DEL SISTEMA${endColour} ${yellowColour}------------------------------------------${endColour}\n"
  echo -e "\t${turquoiseColour}-${endColour} ${purpleColour}kill %%${endColour} ${yellowColour}----------->${endColour} ${grayColour}Matar procesos en segundo plano.${endColour}"
  echo -e "\t${turquoiseColour}-${endColour} ${purpleColour}ln${endColour} ${yellowColour}----------->${endColour} ${grayColour}Enlace simbolico.${endColour}"
  echo -e "\t${turquoiseColour}-${endColour} ${purpleColour}cut${endColour} ${turquoiseColour}'{delimitador}' -f {select_fild}${entered} ${yellowColour}----------->${endColour} ${grayColour}Cortar un str.${endColour}"
  echo -e "\t${turquoiseColour}-${endColour} ${purpleColour}tr${endColour} ${yellowColour}----------->${endColour} ${grayColour}Eliminar o remplazar un str.${endColour}"
  echo -e "\t${turquoiseColour}-${endColour} ${purpleColour}xxd -ps${endColour} ${yellowColour}----------->${endColour} ${grayColour}Encodear o decodear a hexadecimal o de hexadecimal.${endColour}"
  echo -e "\t${turquoiseColour}-${endColour} ${purpleColour}echo \$(echo \"obase=10; ibase=16; {str}\")${endColour} ${yellowColour}----------->${endColour} ${grayColour}Decodear str de heaxadecimal.${endColour}"
  echo -e "\t${turquoiseColour}-${endColour} ${purpleColour}ps -faux${endColour} ${yellowColour}----------->${endColour} ${grayColour}Listar procesos del sistema.${endColour}"
  echo -e "\t${turquoiseColour}-${endColour} ${purpleColour}ps -eo command${endColour} ${yellowColour}----------->${endColour} ${grayColour}Listar comandos ejecutandose en el sistema.${endColour}"
  echo -e "\n${yellowColour}------------------------------------------${endColour} ${redColour}SCRIPTING EN BASH${endColour} ${yellowColour}--------------------------------------------${endColour}\n"
  echo -e "\t${yellowColour}LISTAS: ${endColour}\n"
  echo -e "\t${turquoiseColour}-${endColour} ${purpleColour}declare -a lista${turquoiseColour}=(${endColour}${redColour}{elements}${endColour}${turquoiseColour})${endColour}${endColour} ${yellowColour}----------->${endColour} ${grayColour}Declarar una lista.${endColour}"
  echo -e "\t${turquoiseColour}-${endColour} ${purpleColour}echo ${yellowColour}\${${endColour}${purpleColour}lista${endColour}${redColour}[${endColour}${purpleColour}pos${enColour}${redColour}]${endColour}${yellowColour}}${enColour} ${endColour} ${yellowColour}----------->${endColour} ${grayColour}Mostrar una posiciÃ³n de la lista.${endColour}"
  echo -e "\t${turquoiseColour}-${endColour} ${purpleColour}echo ${yellowColour}\${${endColour}${redColour}#${enColour}${purpleColour}lista${enColour}${redColour}[@]${endColour}${yellowColour}}${endColour} ${endColour} ${yellowColour}----------->${endColour} ${grayColour}Conocer el length de una lista.${endColour}"
  echo -e "\t${turquoiseColour}-${endColour} ${purpleColour}echo ${yellowColour}\${${endColour}${purpleColour}lista${enColour}${redColour}[@]${endColour}${yellowColour}}${endColour} ${endColour} ${yellowColour}----------->${endColour} ${grayColour}Listar todos los valores de la lista.${endColour}"
  echo -e "\t${turquoiseColour}-${endColour} ${purpleColour}lista${turquoiseColour}+=(${endColour}${purpleColour}valueToAdd${endColour}${turquoiseColour})${endColour} ${yellowColour}----------->${endColour} ${grayColour}Agregar un valor a la lista.${endColour}"
  echo -e "\t${turquoiseColour}-${endColour} ${purpleColour}unset list${redColour}[${endColour}${purpleColour}pos${endColour}${redColour}]${endColour}${endColour} ${yellowColour}----------->${endColour} ${grayColour}Eliminar un elemento de la lista.${endColour}"
  echo -e "\t${turquoiseColour}-${endColour} ${purpleColour}lista${turquoiseColour}=(${endColour}${yellowColour}\${${endColour}${purpleColour}lista${endColour}${redColour}[@]${endColour}${yellowColour}}${endColour}${turquoiseColour})${endColour}${endColour} ${yellowColour}----------->${endColour} ${grayColour}Redeclarar una lista despues de haber eliminado un elem. para evitar conflictos.${endColour}"
  echo -e "\n\t${yellowColour}BUCLES: ${endColour}\n"
  echo -e "\t${turquoiseColour}-${endColour} ${purpleColour}for ${redColour}elem${endColour} ${purpleColour}in${endColour} ${yellowColour}\$(${endColour}${redColour}seq${endColour} ${grayColour}1 10${endColour}${yellowColour})${endColour}${purpleColour};${endColour} ${redColour}do${endColour} ${grayColour}x${endColour}${purpleColour};${endColour} ${redColour}done${endColour} ${yellowColour}----------->${endColour} ${grayColour}Recorrer una secuencia.${endColour}"
  echo -e "\t${turquoiseColour}-${endColour} ${purpleColour}for ${redColour}elem${endColour} ${purpleColour}in${endColour} ${yellowColour}{${endColour}${redColour}0000..9999${endColour}${yellowColour}}${endColour}${purpleColour};${endColour} ${redColour}do${endColour} ${grayColour}x${endColour}${purpleColour};${endColour} ${redColour}done${endColour} ${yellowColour}----------->${endColour} ${grayColour}Recorrer una secuencia grande.${endColour}"
  echo -e "\t${turquoiseColour}-${endColour} ${purpleColour}for ${redColour}line${endColour} ${purpleColour}in${endColour} ${yellowColour}\$(${endColour}${redColour}stdout${endColour}${yellowColour})${endColour}${purpleColour};${endColour} ${redColour}do${endColour} ${grayColour}x${endColour}${purpleColour};${endColour} ${redColour}done${endColour} ${yellowColour}----------->${endColour} ${grayColour}Recorrer lineas del cat de un archivo o stdout de un comando.${endColour}"
  echo -e "\t${turquoiseColour}-${endColour} ${purpleColour}${redColour}stdout${endColour} ${turquoiseColour}|${endColour} ${purpleColour}while${endColour} ${yellowColour}read line${endColour}${purpleColour};${endColour} ${redColour}do${endColour} ${grayColour}x${endColour}${purpleColour};${endColour} ${redColour}done${endColour} ${yellowColour}----------->${endColour} ${grayColour}Recorrer lineas del cat de un archivo o stdout de un comando con while.${endColour}"
  echo -e "\t${turquoiseColour}-${endColour} ${purpleColour}while ${turquoiseColour}IFS=${endColour} ${yellowColour}read${endColour} ${turquoiseColour}-r${endColour} ${yellowColour}line${endColour}${purpleColour};${endColour} ${redColour}do${endColour} ${purpleColour}echo${endColour} ${yellowColour}\$line${endColour}${purpleColour};${endColour} ${redColour}done${endColour} ${turquoiseColour}<${endColour} ${purpleColour}{file}${endColour} ${yellowColour}----------->${endColour} ${grayColour}Leer 1 x 1 las lineas de un archivo.${endColour}"
}

function commands(){ 
  if [ "$1" == "git" ]; then
    git $1
  elif [ "$1" == "bash" ]; then
    bash $1
  fi
}


declare -i selector=0

while getopts "c:h" arg;do 
  case $arg in
    c) tech=$OPTARG; let selector+=1;;
    h) ;;
  esac
done

if [ $selector -eq 1 ]; then
  commands $tech
else
  help_panel
fi
